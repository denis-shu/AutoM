@model testAdmin.Models.Subject


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form form-horizontal">
        <h4>Subject</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id, new { id = "id" })
        @Html.HiddenFor(m => m.VisualRepresentation_Id, new { id = "vr_id" })
        @Html.HiddenFor(m => m.Characteristics_Id, new { id = "char_id" })
        @Html.HiddenFor(m => m.Characteristic.Language_Id, new { id = "lang_id" })
        <div class="container">
            <div class="col-sm-12">
                <div class="form-group">
                    <div class="col-sm-6">
                        @Html.LabelFor(model => model.Key, htmlAttributes:
                        new { @class = "control-label col-sm-4" })
                        <div class="col-sm-8" style="margin-bottom: 10px;">
                            @Html.EditorFor(model => model.Key,
                            new { htmlAttributes = new { @class = "form-control", id = "Key" } })
                            @Html.ValidationMessageFor(model => model.Key, "",
                            new { @class = "text-danger" })
                        </div>

                        @Html.LabelFor(model => model.Description, htmlAttributes:
                        new { @class = "control-label col-sm-4" })
                        <div class="col-sm-8">
                            @Html.TextAreaFor(model => model.Description,
                            new { htmlAttributes = new { @class = "textarea form-control", id = "desc" } })
                            @Html.ValidationMessageFor(model => model.Description, "",
                            new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="buttons col-sm-6">
                        <input id="btnAdd" type="button" class="btn btn-default btn-primary"
                               value="Add Textbox" onclick="AddTextBox()" />
                        @if (Model.Id != 0)
                        {
                            <input id="btnAddTags" class="btn btn-info btn-primary" type="button"
                                   value="Save new Tag" onclick="AddTag($('#id').val())" />
                        }
                        <input id="btnDeleteTags" type="button" class="btn btn-danger btn-primary"
                               onclick="DeleteTags(@Model.Id)" value="Delete Tags" />
                    </div>
                </div>
            </div>
            <div class="clearfix"></div>
            <hr />
            <div class="col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Characteristic.Language, "Characteristic",
           htmlAttributes: new { @class = "control-label col-sm-2" })
                    <div class="col-sm-4" id="chars">

                        @if (Model.Characteristics_Id != null)
                        {
                            @Html.EditorFor(model => model.Characteristic.Language.Language1,
                                 new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Characteristic.Language.Language1, "",
                                 new { @class = "text-danger" })
                        }
                    </div>
                    <div class="buttons buttons-char col-sm-6">
                        <input id="addTextBoxChar" type="button" class="btn btn-default btn-primary"
                               value="Add TextBox" style="display:none" onclick="AddTextBoxChar()" />

                        <input id="addChar" type="button" class="btn btn-info btn-primary"
                               value="Save Characteristic" onclick="AddCharacteristic()" style="display:none" />
                        <input type="button" class="btn btn-default btn-danger" id="delChar"
                               value="Delete Characteristic" onclick="DeleteCharacteristic(@Model.Characteristics_Id)" style="display:none" />
                    </div>
                </div>
            </div>


            <div class="clearfix"></div>
            <hr />
            <div class="col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Tags, "Tags",
                    htmlAttributes: new { @class = "control-label col-sm-2" })                    
                    <div class="col-sm-5" id="tags">
                            @foreach (var t in Model.Tags)
                            {
                                <div class="col-sm-8">
                                    @Html.TextBoxFor(model => t.Tag1,
                        new { @class = "form-control", name = "tagName", style = "margin-bottom: 10px" })
                                    @Html.ValidationMessageFor(model => t.Tag1, "",
                          new { @class = "text-danger" })
                                </div>
                                <div class="col-sm-1">
                                    <button class="btn btn-danger" onclick="DeleteOneTag(@t.Id)">X</button>
                                </div>
                            }
                    </div>           
                    <div class="buttons">
                        <input id="btnAdd" type="button" class="btn btn-default btn-primary"
                               value="Add Textbox" onclick="AddTextBox()" />
                        @if (Model.Id != 0)
                        {
                            <input id="btnAddTags" class="btn btn-info btn-primary" type="button"
                                   value="Save new Tag" onclick="AddTag($('#id').val())" />
                        }
                        <input id="btnDeleteTags" type="button" class="btn btn-danger btn-primary"
                               onclick="DeleteTags(@Model.Id)" value="Delete Tags" />
                    </div>
                </div>
            </div>

            <div class="clearfix"></div>
            <hr />
            <div class="col-sm-12">
                <div class="visualText form-group">
                    @Html.LabelFor(model => model.VisualRepresentation.Code,
               "Visual Representation", htmlAttributes: new { @class = "visual-label control-label col-sm-2" })
                    <div class="notFormatCode col-sm-4">
                        @Html.TextAreaFor(model => model.VisualRepresentation.Code,
new { htmlAttributes = new { @class = "form-control", id = "vr" } })
                        @Html.ValidationMessageFor(model => model.VisualRepresentation.Code, "",
                   new { @class = "text-danger" })
                        <hr>

                    </div>
                    <div class="wrap-formatCode col-sm-4">
                        <code class="cs formatCode"></code>
                    </div>
                </div>
                <div class="form-group">
                    <div style="position:relative;">
                        <label class="control-label col-sm-2">Code Image</label>
                        <div class="choose-img col-sm-2">
                            <a href="javascript:" class="choose-img-link">
                                Choose file...
                                <input class="choose-img-input" type="file" name="image"
                                       id="image" multiple="multiple" />
                            </a>
                        </div>
                        <input type="text" name="imageu" id="imageLink" value="" class="img-url form-control col-sm-2" placeholder="Image link" />
                    </div>
                    <div class="clearfix"></div>
                    <div class="visual-footer col-sm-12">
                        @if ((Model.VisualRepresentation != null) && (Model.VisualRepresentation.Image != null))
                        {
                            <div class="col-xs-3 col-sm-3">
                                <img class="image-thumbnail img-responsive" ,
                                     src="@Url.Action("GetImage", "Subject", new {id = Model.VisualRepresentation.Id})" />
                            </div>
                        }
                        else
                        {
                            <div class="control-label col-sm-2" style="margin: 10px 0">No Code Image</div>
                            <div class="col-sm-1"></div>
                        }
                        <div class="buttons-wrap">
                            <div class="buttons buttons-visual ">
                                <input id="btnAddVisual" type="button" class="btn btn-info" value="Save new Visual" />

                                @if (Model.VisualRepresentation != null)
                                {
                                    <input id="btnDeleteVisual" type="button" class="btn btn-danger" value="Delete Visual"
                                           onclick="DeleteVisual(@Model.VisualRepresentation_Id)" />
                                }
                                @if ((Model.VisualRepresentation != null) && (Model.VisualRepresentation.Image != null))
                                {
                                    <input id="btnDeleteImage" type="button" class="btn btn-danger" value="Delete Image"
                                           onclick="DeleteImage(@Model.VisualRepresentation_Id)" />
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="clearfix"></div>
            <hr />

            <div class="col-sm-12">
                <div class="form-group">
                    @Html.LabelFor(model => model.Properties, "Properties",
                    htmlAttributes: new { @class = "control-label col-sm-2" })
                    @if (Model.Properties != null)
                    {
                        <div class="col-sm-4" id="props">

                            @foreach (var t in Model.Properties)
                            {
                                @Html.ActionLink(t.Properties, "Get", "Property",
                                 new { Id = t.Id }, null)
                            }

                        </div>
                    }
                    <div class="buttons col-sm-6">
                        @Html.ActionLink("Add Property", "Get", "Property", new
                   {
                       Subject_id = Model.Id
                   }, new { @class = "btn btn-default btn-primary" })
                    </div>
                </div>
                <hr />
                <div class="form-group">
                    <div class="buttons-control col-sm-offset-3 col-sm-6">
                        <input type="button" value="Save" class="btn btn-primary btn-lg" onclick="AddNewSub()" />
                        @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default btn-lg" })
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script src="~/Scripts/highlight.pack.js"></script>
<script>
    hljs.initHighlightingOnLoad();
</script>
<script>

            var isAdded = true;
            var subjectId;
            //Add Visual object
            $(document).ready(function () {
                $("textarea").attr("rows", "4");
                $(".formatCode").text($(".notFormatCode").find("textarea").val());

                $('div .formatCode').each(function (i, block) {
                    hljs.highlightBlock(block);
                });
                $("#VisualRepresentation_Code").on('keyup', function () {
                    var temp = $(".notFormatCode").find("textarea").val();
                    $(".formatCode").text('');
                    $(".formatCode").text(temp);
                    $('div .formatCode').each(function (i, block) {
                        hljs.highlightBlock(block);
                    });
                });

                $('textarea').autoResize({
                    extraSpace: 13
                });

                $("#btnAddVisual").click(function () {

                    var codeArr = document.getElementById('VisualRepresentation_Code').value;
                    var file = $("#image").get(0).files;
                    var link = $("#imageLink").val();
                    var data = new FormData;
                    data.append("Image", file[0]);
                    data.append("Code", codeArr);
                    data.append("Id", $("#vr_id").val());
                    data.append("ImageLink", link);

                    $.ajax({
                        type: "POST",
                        url: "@Url.Action("Upload", "Subject")",
                        data: data,
                        dataType: "json",
                        cache: false,
                        contentType: false,
                        processData: false,
                        success: function (response) {
                            $("#vr_id").val(response.Id);

                            toastr.success("Success");
                        },
                        error: function (response) {
                            toastr.info("Smthg wrong");
                        }

                    });
                });

            });

            //Upload image by link
            $("#imageLink").change(function () {
                var url = $("#imageLink").val();
                url_validate = /(ftp|http|https):\/\/(\w+:{0,1}\w*@@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@@!\-\/]))?/;
                if (!url_validate.test(url)) {
                    bootbox.alert('Enter a valid link');
                }

            });

            //Delete Visual object
            function DeleteVisual(id) {
                if (id == null) {
                    toastr.info("VisualRepresentation doesnt exist");
                    return;
                }
                bootbox.confirm("Please confirm deletion", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/Subject/DeleteVisual/" + id,
                            data: JSON.stringify(id),
                            type: "POST",
                            contentType: "application/json:charset=utf-8",
                            dataType: "json",
                            success: function (response) {
                                $("#vr_id").val(null);
                                $("#vr").val("");
                                location.reload();
                                toastr.success("VisualRepresentation model was deleted");
                            },
                            error: function (response) {
                                toastr.error("Smth wrong");
                            }

                        });
                    }
                });

            }

            //Delete Visual image
            function DeleteImage(id) {
                if (id == null) {
                    toastr.info("Image doesnt exist");
                    return;
                }
                bootbox.confirm("Please confirm deletion", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/Subject/DeleteImage/" + id,
                            data: JSON.stringify(id),
                            type: "POST",
                            contentType: "application/json:charset=utf-8",
                            dataType: "json",
                            success: function (response) {
                                toastr.success("Code image has been deleted");
                                location.reload();
                            },
                            error: function (response) {
                                toastr.error("Smth wrong");
                            }

                        });
                    }
                });
            }
            //Add New Sub
            function AddNewSub() {
                if (!isValid()) {
                    toastr.error("Please, check the field");
                    return false;
                }
                var sub = {
                    Description: $("#Description").val(),
                    Key: $("#Key").val(),
                    Characteristics_Id: $("#char_id").val(),
                    VisualRepresentation_Id: $("#vr_id").val(),
                    Id: $("#id").val()

                };
                bootbox.confirm("Add new Subject?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/Home/Update",
                            data: JSON.stringify(sub),
                            type: "POST",
                            contentType: 'application/json',
                            processData: false,
                            success: function (response) {

                                if (isAdded) {
                                    AddTag(response.Id);
                                }
                                window.location.href = response.Url + response.Id;
                                toastr.success("Done");
                            },
                            error: function (response) {
                                toastr.info("Smth wrong")
                            }

                        });
                    }
                });

            }

            //check charcteristic fields

            if ($('#chars').find('input').length == 0) {
                $("#addTextBoxChar").show();
            }
            else {
                $("#delChar").show();
                $("#addChar").show();
            }
            //Add textbox for characteristic
            function AddTextBoxChar() {
                var div = GetDynamicTextBoxChar("");
                $("#chars").append(div);
                $("#addTextBoxChar").hide();
                $("#addChar").show();
                $("#delChar").show();
            }

            //Add textbox for characteristic
            function GetDynamicTextBoxChar(value) {
                var div = $("<div />");
                var textBox = $("<input />").attr("type", "textbox").attr("name", "charName").attr("id", "char").attr("class", "form-control").attr("style", "margin-bottom: 10px");
                textBox.val(value);
                div.append(textBox);
                return div;
            }

            //Add textbox for tag
            function GetDynamicTextBox(value) {
                var div = $("<div />");

                var textBox = $("<input />").attr("type", "textbox").attr("name", "tagName").attr("id", "t_Tag1").attr("class", "form-control").attr("style", "margin-bottom: 10px");
                textBox.val(value);
                div.append(textBox);
                return div;
            }

            //Add textbox for tag
            function AddTextBox() {
                var div = GetDynamicTextBox("");
                $("#tags").append(div);

            }


            //Add Tag object
            function AddTag(id) {
                var tag = document.getElementsByName("tagName");
                if (tag.length < 1) {

                    return false;
                }
                var tagArr = [];
                for (var i = 0; i < tag.length; i++) {
                    tagArr[i] = tag[i].value;
                }

                var tagObj = {
                    Sub_Id: id,
                    Tag1: tagArr
                };

                $.ajax({
                    url: "/Subject/AddTags",
                    data: JSON.stringify(tagObj),
                    type: "POST",
                    contentType: 'application/json',
                    processData: false,
                    success: function (response) {
                        toastr.success("Tags added");
                        isAdded = false;

                    },
                    error: function (response) {
                        toastr.alert("Smth wrong");
                    }
                });
            }

            //Delete Tags
            function DeleteTags(id) {
                bootbox.confirm("Delete tags. Are u sure?", function (result) {
                    var obj = $(this);
                    if (result) {
                        $.ajax({
                            url: "/Subject/DeleteTag/" + id,
                            data: JSON.stringify(id),
                            type: "POST",
                            contentType: "application/json:charset=utf-8",
                            dataType: "json",
                            success: function (response) {
                                $(obj).remove();
                                toastr.info("Success! Tags has been deleted");
                                setTimeout(location.reload.bind(location), 1500);

                            },
                            error: function (response) {
                                toastr.error("Smth wrong");
                            }
                        });
                    }

                });
            }

            //Add Characteristic
            function AddCharacteristic() {
                var langObj = {
                    Id: $("#lang_id").val(),
                    Language1: $("#char").val()
                };
                bootbox.confirm("Add new characteristic?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/Subject/AddCharacteristic",
                            type: "POST",
                            data: JSON.stringify(langObj),
                            contentType: 'application/json',
                            processData: false,
                            success: function (response) {
                                $("#char_id").val(response.id);
                                toastr.success("Characteristic added");

                            },
                            error: function (response) {
                                toastr.alert("Smth wrong");
                            }

                        });
                    }
                });
            }

            function DeleteCharacteristic(id) {
                bootbox.confirm("Delete ?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/Subject/DeleteCharacteristic/" + id,
                            data: JSON.stringify(id),
                            type: "POST",
                            contentType: "application/json:charset=utf-8",
                            dataType: "json",
                            success: function (response) {
                                $("#char_id").val(null);
                                toastr.info("Characteristic has been deleted");

                    },
                    error: function (response) {
                        toastr.error("Smth wrong");
                    }
                });
            }
            $("#delChar").hide();
            $("#chars").empty();
        });
    }

            function DeleteOneTag(id) {
                var obj = $(this);
                $.ajax({
                    url: "/Subject/DeleteOneTag/" + id,
                    data: JSON.stringify(id),
                    type: "POST",
                    contentType: "application/json:charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        $(obj).remove();
                        toastr.info("Tag has been deleted");
                        setTimeout(location.reload.bind(location), 1500);
                    },
                    error: function (response) {
                        toastr.error("Smth wrong");
                    }
                });

            }


            function isValid() {
                var isValid = true;
                if ($('#Key').val().trim() == "") {
                    $('#Key').css('border-color', 'Red');
                    isValid = false;
                }
                else {
                    $('#Key').css('border-color', 'lightgrey');
                }

                //if ($('#desc').val().trim() == "") {
                //    $('#desc').css('border-color', 'Red');
                //    isValid = false;
                //}
                //else {
                //    $('#desc').css('border-color', 'lightgrey');
                //}


        return isValid;
    }




</script>
